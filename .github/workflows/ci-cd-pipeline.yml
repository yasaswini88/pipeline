name: CI/CD Pipeline Demo

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        run: |
          chmod +x mvnw
          ./mvnw clean package

      - name: Verify Build Artifacts
        run: |
          ls -la target/
          pwd
          
     

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up SSH Key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          echo "Deploying to EC2 Instance..."

          # Transfer JAR file to EC2
          # scp -o StrictHostKeyChecking=no -r /home/runner/work/pipeline/pipeline/target/pipeline-0.0.1-SNAPSHOT.jar
          #  $EC2_USER@$EC2_HOST:/home/ec2-user/pipeline/

          # Start the Spring Boot application
          ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'EOF'
            echo "Stopping any existing application..."
            pkill -f "java -jar" || true

            echo "Starting the new application..."
            nohup java -jar /home/ec2-user/pipeline/target/pipeline-0.0.1-SNAPSHOT.jar > /home/ec2-user/pipeline/app.log 2>&1 &
            echo "Application started successfully!"
          EOF

      - name: Verify Application Logs
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          echo "Fetching application logs from EC2..."
          ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST "tail -n 20 /home/ec2-user/pipeline/app.log"
